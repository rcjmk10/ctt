private GraphServiceClient<?> initGraphClient() throws Exception {
    // 1. Setup proxy
    final InetSocketAddress proxyAddress = new InetSocketAddress(proxyHost, proxyPort);
    final Proxy graphProxy = new Proxy(Proxy.Type.HTTP, proxyAddress);

    // 2. Decode the Base64-encoded PFX content
    byte[] pfxBytes = Base64.getDecoder().decode(encodedCertificate);

    // 3. Load PKCS12 keystore
    KeyStore keystore = KeyStore.getInstance("PKCS12");
    keystore.load(new ByteArrayInputStream(pfxBytes), "changeit".toCharArray());  // changeit = password

    String alias = null;
    Enumeration<String> aliases = keystore.aliases();
    if (aliases.hasMoreElements()) {
        alias = aliases.nextElement();
    } else {
        throw new Exception("No alias found in the keystore");
    }

    // 4. Extract private key and certificate
    PrivateKey privateKey = (PrivateKey) keystore.getKey(alias, "changeit".toCharArray());
    X509Certificate certificate = (X509Certificate) keystore.getCertificate(alias);

    if (privateKey == null || certificate == null) {
        throw new Exception("Failed to extract private key or certificate from keystore");
    }

    // 5. Initialize MSAL confidential client
    ConfidentialClientApplication app = ConfidentialClientApplication.builder(
            outlook_client_id,
            ClientCredentialFactory.createFromCertificate(privateKey, certificate))
            .authority("https://login.microsoftonline.com/" + outlook_tenant_id)
            .build();

    // 6. Acquire token manually
    ClientCredentialParameters parameters = ClientCredentialParameters.builder(
            Collections.singleton("https://graph.microsoft.com/.default"))
            .build();

    IAuthenticationResult result = app.acquireToken(parameters).get();
    String token = result.accessToken();

    log.error("******************************************************************************************\n" +
            "ClientID: " + outlook_client_id + ", tenantId: " + outlook_tenant_id + ", token: " + token);

    // 7. Auth provider using manually-acquired token
    TokenCredentialAuthProvider authProvider = new TokenCredentialAuthProvider(
            SCOPES,
            request -> Mono.just(new AccessToken(token, OffsetDateTime.now().plusHours(1)))
    );

    // 8. Configure Graph client with proxy
    OkHttpClient okClient = HttpClients.createDefault(authProvider)
            .newBuilder()
            .proxy(graphProxy)
            .build();

    return GraphServiceClient
            .builder()
            .authenticationProvider(authProvider)
            .httpClient(okClient)
            .buildClient();
}
