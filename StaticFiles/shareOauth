MailboxSettings mailboxSettings = graphClient
    .me()
    .mailboxSettings()
    .buildRequest()
    .get();

AutomaticRepliesSetting autoReplies = mailboxSettings.automaticRepliesSetting;

System.out.println("Out of Office Status: " + autoReplies.status);
System.out.println("Internal Reply: " + autoReplies.internalReplyMessage);
System.out.println("External Reply: " + autoReplies.externalReplyMessage);

JsonObject autoReplies = json.getAsJsonObject("automaticRepliesSetting");

String status = autoReplies.get("status").getAsString();
JsonObject start = autoReplies.getAsJsonObject("scheduledStartDateTime");
JsonObject end = autoReplies.getAsJsonObject("scheduledEndDateTime");

String startTime = start.get("dateTime").getAsString();
String startZone = start.get("timeZone").getAsString();

String endTime = end.get("dateTime").getAsString();
String endZone = end.get("timeZone").getAsString();

System.out.printf("Auto-reply scheduled from %s (%s) to %s (%s)\n",
        startTime, startZone, endTime, endZone);



MessageRuleCollectionPage rules = graphClient
    .me()
    .mailFolders("inbox")
    .messageRules()
    .buildRequest()
    .get();

for (MessageRule rule : rules.getCurrentPage()) {
    if (rule.actions != null && rule.actions.forwardTo != null) {
        System.out.println("Forward Rule: " + rule.displayName);
        rule.actions.forwardTo.forEach(recipient ->
            System.out.println("Forwarding to: " + recipient.emailAddress.address)
        );
    }
}
